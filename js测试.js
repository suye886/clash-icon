const { type, name } = $arguments

// ÂèØÂÖºÂÆπÁõ¥ËøûÁöÑÂ§áÈÄâÂá∫Âè£ÔºàÂè™Êúâ fallback Êó∂Êâç‰ºöÂä†Ôºâ
const compatible_outbound = {
  tag: 'COMPATIBLE',
  type: 'direct',
}

// ÂèØÈÄâÁöÑÂÖúÂ∫ïÂàÜÁªÑÔºöÊääÊâÄÊúâÊú™ÂëΩ‰∏≠ÈÄªËæëÁöÑËäÇÁÇπÈÉΩÂä†Âà∞ËøôÈáå
const fallback_proxy_group = {
  tag: 'PROXY',
  type: 'select',
  outbounds: []
}

let compatibleUsed = false
let config = JSON.parse($files[0])

// ‰∫ßÂá∫ËäÇÁÇπÂàóË°®
let proxies = await produceArtifact({
  name,
  type: /^1$|col/i.test(type) ? 'collection' : 'subscription',
  platform: 'sing-box',
  produceType: 'internal',
})

// Debug ËæìÂá∫
console.log('=== ÁîüÊàêÁöÑ‰ª£ÁêÜËäÇÁÇπ tags ===')
console.log(proxies.map(p => p.tag))

if (!Array.isArray(proxies) || proxies.length === 0) {
  console.warn('‚ö†Ô∏è Êú™Ëé∑ÂèñÂà∞‰ªª‰Ωï‰ª£ÁêÜËäÇÁÇπÔºÅËØ∑Ê£ÄÊü•ËÆ¢ÈòÖÊàñÁΩëÁªú„ÄÇ')
}

// ÂÖàÊääÊâÄÊúâËäÇÁÇπÂΩì‰Ωú outbound push ËøõÂéªÔºåÁ≠âÂæÖÂêéÁª≠ÂàÜÁ±ªÂ°´ÂÖÖ
config.outbounds.push(...proxies)

/**
 * ËøîÂõûÁ¨¶ÂêàÊ≠£ÂàôÁöÑÊâÄÊúâËäÇÁÇπ tag ÂàóË°®
 */
function getTags(proxies, regex) {
  const matched = regex
    ? proxies.filter(p => typeof p.tag === 'string' && regex.test(p.tag))
    : proxies.slice()

  const tags = matched.map(p => p.tag)
  if (regex && tags.length === 0) {
    console.warn(`‚ö†Ô∏è Ê≠£Âàô ${regex} Êú™ÂåπÈÖçÂà∞‰ªª‰ΩïËäÇÁÇπ„ÄÇ`)
  }
  return tags
}

// ÂÖàÁªôÊØè‰∏™Á≠ñÁï•ÁªÑÂ∞ùËØïÂ°´ÂÖÖ
config.outbounds.forEach(group => {
  if (!group.tag || !Array.isArray(group.outbounds)) return

  const tag = group.tag.toLowerCase()
  switch (tag) {
    case 'all':
      group.outbounds.push(...getTags(proxies))
      break
    case 'hk':
    case 'hk-auto':
      group.outbounds.push(...getTags(proxies, /Ê∏Ø|hk|hongkong|kong kong|üá≠üá∞/i))
      break
    case 'mo':
    case 'mo-auto':
      group.outbounds.push(...getTags(proxies, /Êæ≥|mo|macao|macau|üá≤üá¥/i))
      break
    case 'tw':
    case 'tw-auto':
      group.outbounds.push(...getTags(proxies, /Âè∞|tw|taiwan|üáπüáº/i))
      break
    case 'jp':
    case 'jp-auto':
      group.outbounds.push(...getTags(proxies, /Êó•Êú¨|jp|japan|üáØüáµ/i))
      break
    case 'sg':
    case 'sg-auto':
      group.outbounds.push(...getTags(proxies, /^(?!.*(?:us)).*(Êñ∞|sg|singapore|üá∏üá¨)/i))
      break
    case 'us':
    case 'us-auto':
      group.outbounds.push(...getTags(proxies, /Áæé|us|unitedstates|united states|üá∫üá∏/i))
      break
  }
})

// Â§ÑÁêÜÁ©∫ÁªÑÔºöfallback Âà∞ PROXY Êàñ COMPATIBLE
config.outbounds.forEach(group => {
  if (!Array.isArray(group.outbounds)) return

  if (group.outbounds.length === 0) {
    // È¶ñÂÖàËÆ∞ÂΩïÊâÄÊúâÊú™ÂëΩ‰∏≠ÁöÑËäÇÁÇπÂà∞ fallback_proxy_group
    if (group.tag.toLowerCase() !== 'compatible') {
      fallback_proxy_group.outbounds.push(...getTags(proxies))
    }
    // ÁÑ∂ÂêéÂÜçÁªôËøô‰∏™ÁªÑÂä† COMPATIBLE
    if (!compatibleUsed) {
      config.outbounds.push(compatible_outbound)
      compatibleUsed = true
    }
    group.outbounds.push(compatible_outbound.tag)
  }
})

// Â¶ÇÊûú‰Ω†ÊÉ≥Ë¶Å‰∏Ä‰∏™ PROXY ÂÖúÂ∫ïÁªÑÔºåÂ∞±ÊääÂÆÉ push ËøõÂéª
if (fallback_proxy_group.outbounds.length > 0) {
  // ÂéªÈáç
  fallback_proxy_group.outbounds = [...new Set(fallback_proxy_group.outbounds)]
  config.outbounds.push(fallback_proxy_group)
}

$content = JSON.stringify(config, null, 2)